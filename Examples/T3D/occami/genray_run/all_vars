netcdf genray {
dimensions:
	neltmax = 1556 ;
	nrays = 1 ;
	two = 2 ;
	nbulk = 1 ;
	char8dim = 8 ;
	char64dim = 64 ;
	char128dim = 128 ;
	char256dim = 256 ;
	nxeqd = 65 ;
	nyeqd = 65 ;
	nrho = 200 ;
	nrhom = 199 ;
	nfreq = 1 ;
variables:
	char version(char64dim) ;
		version:long_name = "GENRAY version number" ;
	char mnemonic(char128dim) ;
		mnemonic:long_name = "Mnemonic run identifier" ;
	int id ;
		id:long_name = "Disp relation identifier" ;
	int iabsorp ;
		iabsorp:long_name = "Absorp calc identifier" ;
	int ieffic ;
		ieffic:long_name = "Current drive calc identifier" ;
	char ion_absorption(char8dim) ;
		ion_absorption:long_name = "Switch on/off ion absorption at iabsorp=3,9,91,92" ;
	double refl_loss ;
		refl_loss:long_name = "fraction of power loss at each reflection" ;
	int iflux ;
		iflux:long_name = "Flux calc, non-Westerhof-Tokman id" ;
	int ioxm ;
		ioxm:long_name = "wave mode indicator (1 - om, -1 - xm )" ;
	int ioxm_n_npar ;
		ioxm_n_npar:long_name = "wave mode indicator: sign before square root to find  N(N_parallel)" ;
	int jwave ;
		jwave:long_name = "Wave harmonic, for CD efficiency calc" ;
	int i_geom_optic ;
		i_geom_optic:long_name = "Integrate rays wrt (1)time,(2)dist" ;
	int istart ;
		istart:long_name = "Ray launch type: 1,eccone; 2,grill, 3,OX in plasma" ;
	int ncone ;
		ncone:long_name0 = "Number of rf source ray cones, istart=1" ;
		ncone:long_name1 = "Each cone has (nray/ncone) launched rays" ;
	int ngrill ;
		ngrill:long_name0 = "Number of rf source ray grills, istart=2," ;
		ngrill:long_name1 = ",nray/ngrill rays launched per grill istart=2,3" ;
		ngrill:long_name2 = ",Each grill has (nray/ngrill) launched rays, istart=2,3" ;
	int ionetwo ;
		ionetwo:long_name = "if ionetwo=1 then calculate CD" ;
	int nray ;
		nray:long_name = "Number of rays" ;
	int nharm ;
		nharm:long_name = "First harmonic number" ;
	double freqcy ;
		freqcy:long_name = "Wave frequency" ;
		freqcy:units = "Hz" ;
	int i_emission ;
		i_emission:long_name = "emission switch: =0 now emission, =1 use emission calculations" ;
	int i_emission_spectrum ;
		i_emission_spectrum:long_name = "emission spectrum switch: =0 no emission spectrum,   =1 use emission spectrum  calculations" ;
	int nrayelt(nrays) ;
		nrayelt:long_name = "Number of ray elements for each ray" ;
	double ws(nrays, neltmax) ;
		ws:long_name = "poloidal distance along a ray" ;
		ws:units = "cms" ;
	double seikon(nrays, neltmax) ;
		seikon:long_name = "eikonal" ;
	double spsi(nrays, neltmax) ;
		spsi:long_name = "normalized small radius=rho given by indexrho" ;
	double wr(nrays, neltmax) ;
		wr:long_name = "major radius" ;
		wr:units = "cms" ;
	double wphi(nrays, neltmax) ;
		wphi:long_name = "toroidal angle" ;
		wphi:units = "rad" ;
	double wz(nrays, neltmax) ;
		wz:long_name = "vertical height" ;
		wz:units = "cms" ;
	double w_theta_pol(nrays, neltmax) ;
		w_theta_pol:long_name = "poloidal angle" ;
		w_theta_pol:units = "degree" ;
	double wnpar(nrays, neltmax) ;
		wnpar:long_name = "parallel refractive index" ;
	double wnper(nrays, neltmax) ;
		wnper:long_name = "perpendicular refractive index" ;
	double delpwr(nrays, neltmax) ;
		delpwr:long_name = "power in ray channel" ;
		delpwr:units = "erg/sec" ;
	double sdpwr(nrays, neltmax) ;
		sdpwr:long_name = "Ion collisionless absorption coeff (all species)" ;
		sdpwr:units = "1/cms" ;
	double wdnpar(nrays, neltmax) ;
		wdnpar:long_name = "wdnpar" ;
	double cwexde(two, nrays, neltmax) ;
		cwexde:long_name = "Complex Ex/E Polarization" ;
	double cweyde(two, nrays, neltmax) ;
		cweyde:long_name = "Complex Ey/E Polarization" ;
	double cwezde(two, nrays, neltmax) ;
		cwezde:long_name = "Complex Ez/E Polarization" ;
	double fluxn(nrays, neltmax) ;
		fluxn:long_name = "fluxn, Stix norm, |E|=1" ;
		fluxn:units = "ergs/sec/cm^2" ;
	double sbtot(nrays, neltmax) ;
		sbtot:long_name = "Magnetic field strength" ;
		sbtot:units = "gauss" ;
	double sene(nrays, neltmax) ;
		sene:long_name = "Density along ray" ;
		sene:units = "particles/cm^3" ;
	double ste(nrays, neltmax) ;
		ste:long_name = "Temperature along ray" ;
		ste:units = "keV" ;
	double szeff(nrays, neltmax) ;
		szeff:long_name = "Zeff along ray" ;
		szeff:units = "dimensionless" ;
	double salphac(nrays, neltmax) ;
		salphac:long_name = "Collisional damping wavenumber" ;
		salphac:units = "1/cms" ;
	double salphal(nrays, neltmax) ;
		salphal:long_name = "Linear damping wavenumber" ;
		salphal:units = "1/cms" ;
	double sb_r(nrays, neltmax) ;
		sb_r:long_name = "B_r magnetic field component" ;
		sb_r:units = "guass" ;
	double sb_z(nrays, neltmax) ;
		sb_z:long_name = "B_z magnetic field component" ;
		sb_z:units = "guass" ;
	double sb_phi(nrays, neltmax) ;
		sb_phi:long_name = "B_phi magnetic field component" ;
		sb_phi:units = "guass" ;
	double wn_r(nrays, neltmax) ;
		wn_r:long_name = "N_r refractive index component" ;
	double wn_z(nrays, neltmax) ;
		wn_z:long_name = "N_z refractive index component" ;
	double wn_phi(nrays, neltmax) ;
		wn_phi:long_name = "N_phi refractive index component" ;
	double vgr_r(nrays, neltmax) ;
		vgr_r:long_name = "vgroup_r normalized to c" ;
	double vgr_z(nrays, neltmax) ;
		vgr_z:long_name = "vgroup_z normalized to c" ;
	double vgr_phi(nrays, neltmax) ;
		vgr_phi:long_name = "vgroup_phi normalized to c" ;
	double flux_z(nrays, neltmax) ;
		flux_z:long_name = "flux_z normalized to c" ;
	double flux_r(nrays, neltmax) ;
		flux_r:long_name = "flux_r normalized to c" ;
	double flux_phi(nrays, neltmax) ;
		flux_phi:long_name = "flux_phi normalized to c" ;
	double w_eff_nc(nrays, neltmax) ;
		w_eff_nc:long_name = "CD efficiency along a ray" ;
		w_eff_nc:units = "(A/cm**2)/(erg/(sec*cm**3))" ;
	char eqdskin(char256dim) ;
		eqdskin:long_name = "Name of input eqdsk, for eqsource=eqdsk" ;
	int nbulk ;
		nbulk:long_name = "Number of Maxl plasma cmpts, electrons+ions" ;
	double dmas(nbulk) ;
		dmas:long_name = "plasma species mass: electrons, then ions" ;
		dmas:units = "Normalized to electron mass" ;
	double charge(nbulk) ;
		charge:long_name = "plasma species charge: electrons, then ions" ;
		charge:units = "Normalized to electronic charge" ;
	double w_tot_pow_absorb_at_refl_nc ;
		w_tot_pow_absorb_at_refl_nc:long_name = "Total power absorbed at reflections of all rays" ;
		w_tot_pow_absorb_at_refl_nc:units = "erg/sec" ;
	int nxeqd ;
		nxeqd:long_name = "Number of r points" ;
	int nyeqd ;
		nyeqd:long_name = "Number of z points" ;
	double eqdsk_r(nxeqd) ;
		eqdsk_r:long_name = "eqdsk r array " ;
		eqdsk_r:units = "m" ;
	double eqdsk_z(nyeqd) ;
		eqdsk_z:long_name = "eqdsk z array " ;
		eqdsk_z:units = "m" ;
	double eqdsk_psi(nyeqd, nxeqd) ;
		eqdsk_psi:long_name = "eqdsk poloidal flux" ;
		eqdsk_psi:units = " " ;
	double z_starting(nrays) ;
		z_starting:long_name = "z_starting" ;
		z_starting:units = "m" ;
	double r_starting(nrays) ;
		r_starting:long_name = "r_starting" ;
		r_starting:units = "m" ;
	double phi_starting(nrays) ;
		phi_starting:long_name = "phi_starting" ;
		phi_starting:units = "degrees" ;
	double alphast(nrays) ;
		alphast:long_name = "toroidal angle measured from R-vector through source" ;
		alphast:units = "degree" ;
	double betast(nrays) ;
		betast:long_name = "poloidal angle measured from z=constant plane, pos above plane, neg below" ;
		betast:units = "degree" ;
	double parallel_cur_total ;
		parallel_cur_total:long_name = "Total parallel current" ;
		parallel_cur_total:units = "A" ;
	double toroidal_cur_total ;
		toroidal_cur_total:long_name = "Total toroidal current" ;
		toroidal_cur_total:units = "A" ;
	double poloidal_cur_total ;
		poloidal_cur_total:long_name = "Total poloidal current" ;
		poloidal_cur_total:units = "A" ;
	double power_inj_total ;
		power_inj_total:long_name = "Total injected power" ;
		power_inj_total:units = "erg/sec" ;
	double power_total ;
		power_total:long_name = "Total absorbed power" ;
		power_total:units = "erg/sec" ;
	double powtot_e ;
		powtot_e:long_name = "Total power to electrons" ;
		powtot_e:units = "erg/sec" ;
	double powtot_i ;
		powtot_i:long_name = "Total power to ions" ;
		powtot_i:units = "erg/sec" ;
	double powtot_cl ;
		powtot_cl:long_name = "Collisional power absorbed" ;
		powtot_cl:units = "erg/sec" ;
	int NR ;
		NR:long_name = "Number of small radius points" ;
	double voltot ;
		voltot:long_name = "Total volume in last closed flux surface" ;
		voltot:units = "cm^3" ;
	double areatot ;
		areatot:long_name = "Total cross-sectional area of LCFS" ;
		areatot:units = "cm^2" ;
	double pollentot ;
		pollentot:long_name = "Poloidal length of LCFS" ;
		pollentot:units = "cm" ;
	double torftot ;
		torftot:long_name = "Toroidal flux through LCFS" ;
		torftot:units = "Tesla*m^2" ;
	int indexrho ;
		indexrho:long_name = "Radial coord type: 2 gives sqrt(tor flx)" ;
	double psifactr ;
		psifactr:long_name = "Reduces Psi-Value of LCFS" ;
		psifactr:units = "Should be .le.1" ;
	double binvol(nrhom) ;
		binvol:long_name = "Volumes of radial bins" ;
		binvol:units = "cm^3" ;
	double binarea(nrhom) ;
		binarea:long_name = "Areas of radial bins" ;
		binarea:units = "cm^2" ;
	double pollen(nrhom) ;
		pollen:long_name = "Poloidal lengths of radial bins" ;
		pollen:units = "cm" ;
	double rho_bin(nrho) ;
		rho_bin:long_name = "normalized small radius bin boundaries" ;
	double rho_bin_center(nrhom) ;
		rho_bin_center:long_name = "normalized small radius bin centers" ;
	double densprof(nbulk, nrho) ;
		densprof:long_name = "plasma density at bin boundaries, e and ions" ;
		densprof:units = "particles/cm^3" ;
	double temprof(nbulk, nrho) ;
		temprof:long_name = "plasma temperatures at bin boundaries, e and ions" ;
		temprof:units = "keV" ;
	double zefprof(nrho) ;
		zefprof:long_name = "plasma Zeff at bin boundaries, e and ions" ;
		zefprof:units = "unitless" ;
	double spower(nrhom) ;
		spower:long_name = "power per bin profile" ;
		spower:units = "erg/sec" ;
	double w_r_densprof_nc(nrho) ;
		w_r_densprof_nc:long_name = "major radius r mesh for plasma profiles" ;
		w_r_densprof_nc:units = "m " ;
	double w_dens_vs_r_nc(nbulk, nrho) ;
		w_dens_vs_r_nc:long_name = "plasma density at bin bndries, e and ions vs major radius" ;
		w_dens_vs_r_nc:units = "particles/m^3" ;
	double w_temp_vs_r_nc(nbulk, nrho) ;
		w_temp_vs_r_nc:long_name = "plasma temperatures at bin bndries, e and ions vs major radius" ;
		w_temp_vs_r_nc:units = "keV" ;
	double w_zeff_vs_r_nc(nrho) ;
		w_zeff_vs_r_nc:long_name = "plasma Zeff at bin bndries vs major radius" ;
		w_zeff_vs_r_nc:units = "unitless" ;
	double GA_tor_cur_total ;
		GA_tor_cur_total:long_name = "GA memo total toroidal current" ;
		GA_tor_cur_total:units = "A" ;
	double s_cur_den_parallel(nrhom) ;
		s_cur_den_parallel:long_name = "averaged parallel current density profile" ;
		s_cur_den_parallel:units = "A/cm**2" ;
	double s_cur_den_onetwo(nrhom) ;
		s_cur_den_onetwo:long_name = "ONETWO current <j.B>/B_0 density profile" ;
		s_cur_den_onetwo:units = "A/cm**2" ;
	double s_cur_den_toroidal(nrhom) ;
		s_cur_den_toroidal:long_name = "toroidal current <j_par>f<1/r**2>/(<B><1/r>) density profile" ;
		s_cur_den_toroidal:units = "A/cm**2" ;
	double s_cur_den_poloidal(nrhom) ;
		s_cur_den_poloidal:long_name = "poloidal current <j_par>B_pol(theta_pol=0)/<B> density profile" ;
		s_cur_den_poloidal:units = "A/cm**2" ;
	double powden(nrhom) ;
		powden:long_name = "power density profile" ;
		powden:units = "erg/(cm**3*sec)" ;
	double powden_e(nrhom) ;
		powden_e:long_name0 = "power density profile to electrons, bin centered" ;
		powden_e:long_name1 = "From wave-particle damping" ;
		powden_e:units = "erg/(cm**3*sec)" ;
	double powden_cl(nrhom) ;
		powden_cl:long_name0 = "power density profile to electrons, bin centered" ;
		powden_cl:long_name1 = "From collisional damping" ;
		powden_cl:units = "erg/(cm**3*sec)" ;
	double powden_i(nrhom) ;
		powden_i:long_name = "power density profile to ions, bin centered" ;
		powden_i:long_name1 = "From wave-particle damping" ;
		powden_i:units = "erg/(cm**3*sec)" ;
	double cweps11(two, nrays, neltmax) ;
		cweps11:long_name = "Complex eps11" ;
	double cweps12(two, nrays, neltmax) ;
		cweps12:long_name = "Complex eps12" ;
	double cweps13(two, nrays, neltmax) ;
		cweps13:long_name = "Complex eps13" ;
	double cweps21(two, nrays, neltmax) ;
		cweps21:long_name = "Complex eps21" ;
	double cweps22(two, nrays, neltmax) ;
		cweps22:long_name = "Complex eps22" ;
	double cweps23(two, nrays, neltmax) ;
		cweps23:long_name = "Complex eps23" ;
	double cweps31(two, nrays, neltmax) ;
		cweps31:long_name = "Complex eps31" ;
	double cweps32(two, nrays, neltmax) ;
		cweps32:long_name = "Complex eps32" ;
	double cweps33(two, nrays, neltmax) ;
		cweps33:long_name = "Complex eps33" ;
	int nfreq ;
		nfreq:long_name = "The number of the emission frequencies" ;
	int iray_status_nc(nfreq, nrays) ;
		iray_status_nc:long_name = "Status code giving the reason each ray stops          " ;
		iray_status_nc:long_name1 = "=-1 bad initial condition;                            " ;
		iray_status_nc:long_name2 = " =1  t.gt.poldist_mx;                                 " ;
		iray_status_nc:long_name3 = " =2 in prep3d delpwr(is).lt.delpwrmn*delpwr(1)        " ;
		iray_status_nc:long_name4 = " =3  irefl.ge.ireflm;                                 " ;
		iray_status_nc:long_name5 = " =4  ray is at tor limiter bndry,  max_limiters.ge.1; " ;
		iray_status_nc:long_name6 = " =5  nstep_rk.gt.maxsteps_rk;                         " ;
		iray_status_nc:long_name7 = " =6  nmode.gt.cnmax, cnmax set in output.f cnmax=10000" ;
		iray_status_nc:long_name8 = " =7  for ((id.eq.1,2).and.(uh.gt.1.d0).and.           " ;
		iray_status_nc:long_name9 = " ((uh-1.d0).lt.del_uh)).and.(cnper.gt.cnper_max_ebw))." ;
		iray_status_nc:long_name10 = "  The ray is close to upper hybrid resonance.         " ;
		iray_status_nc:long_name11 = "  It can be Xmode to close to the UH resonance.       " ;
		iray_status_nc:long_name12 = " =8  if ((vgrmods.gt.1.1).and. ((id.ne.10).and.       " ;
		iray_status_nc:long_name13 = "(id.ne.12).and.(id.ne.13))) and if (id.eq.14);      " ;
		iray_status_nc:long_name14 = " =9  D/(N|gradD|) > toll_hamilt;                      " ;
		iray_status_nc:long_name15 = " =10 in prep3d.f argexp>0;                            " ;
		iray_status_nc:long_name16 = " =11 in prep3d fluxn(is).lt.0.0;                      " ;
		iray_status_nc:long_name17 = " =12 nrayelt=nrelt;                                   " ;
		iray_status_nc:long_name18 = " =13 in RK drkgs2 small time step h.lt.1.d-11         " ;
		iray_status_nc:long_name19 = "  can not get the given accuracy prmt4                " ;
		iray_status_nc:long_name20 = "  =14, ray started with zero power (lt.1e-100)        " ;

// global attributes:
		:title = "netCDF file of ray data from GENRAY version: genray_v10.10_151110.2" ;
}
